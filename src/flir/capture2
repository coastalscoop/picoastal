import threading
import time
import os
import stat
import datetime
import json
import argparse
import sys
import PySpin  # Import the PySpin library

# Global variables
NUM_IMAGES = 0
OUTPATH = ""

# Define a function to capture images from a single camera
def capture_images_from_camera(cam, num_images, cfg):
    """
    Capture images from a single camera.

    :param cam: Camera to acquire images from.
    :param num_images: Number of images to capture.
    :param cfg: Configuration parameters.
    """
    print(f"Starting image capture for camera {cam.GetUniqueID()}...")
    # Your image capture code here...

def run_camera_capture(cam, num_images, cfg):
    """
    Run the capture process for each camera.

    :param cam: Camera to acquire images from.
    :param num_images: Number of images to capture.
    :param cfg: Configuration parameters.
    """
    try:
        result = True
        cam.Init()  # Initialize the camera

        # Set camera parameters
        # ...

        # Acquire images
        capture_images_from_camera(cam, num_images, cfg)

        # Deinitialize camera
        cam.DeInit()

    except PySpin.SpinnakerException as ex:
        print("Error: %s" % ex)
        result = False

    print(f"Image capture complete for camera {cam.GetUniqueID()}.")

def main():
    """
    Run the main program.

    :return: True if successful, False otherwise.
    :rtype: bool
    """
    # Argument parser
    parser = argparse.ArgumentParser()

    # input configuration file
    parser.add_argument("--configuration-file", "-cfg", "-i",
                        nargs=1,
                        action="store",
                        dest="config",
                        required=True,
                        help="Configuration JSON file.",)
    # output destination
    parser.add_argument("--output", "-o",
                        action="store",
                        dest="output",
                        default="output",
                        required=False,
                        help="Output folder for processed images.")

    args = parser.parse_args()

    # verify if the input file exists,
    # if it does, then read it
    inp = args.config[0]
    if os.path.isfile(inp):
        with open(inp, "r") as f:
            cfg = json.load(f)
    else:
        raise IOError("No such file or directory \"{}\"".format(inp))

    # get the date
    global today
    today = datetime.datetime.now()

    # check if the current hour is in capture hours
    hour = today.hour
    capture_hours = cfg["data"]["hours"]
    if hour in capture_hours:
        print("Sunlight hours. Starting capture cycle.\n")
        print("Capture starting at {}:\n".format(today))
    else:
        print("Not enough sunlight at {}. Not starting capture cycle.".format(
            today))
        sys.exit()

    # read the output path
    main_path = cfg["data"]["output"]

    # current cycle output path - note that this is a global variable
    global OUTPATH
    OUTPATH = args.output
    if not os.path.isdir(OUTPATH):
        os.makedirs(OUTPATH)
        os.chmod(OUTPATH, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)

    result = True

    # Retrieve singleton reference to the system object
    system = PySpin.System.GetInstance()

    # Get the current library version
    version = system.GetLibraryVersion()
    print("Library version: %d.%d.%d.%d" %
          (version.major, version.minor, version.type, version.build))

    # Retrieve the list of cameras from the system
    cam_list = system.GetCameras()

    num_cameras = cam_list.GetSize()

    print("\nNumber of cameras detected: %d" % num_cameras)

    # Finish if there are no cameras
    if num_cameras < 2:  # Require at least two cameras

        # Clear camera list before releasing the system
        cam_list.Clear()

        # Release the system instance
        system.ReleaseInstance()

        print("Not enough cameras!")
        input("Done! Press Enter to exit...")
        return False

    # Create a list called `camera_threads` to store the threads for each camera
    camera_threads = []

    # Run the example on each camera
    for i in range(2):  # Loop through the first two cameras
        cam = cam_list.GetByIndex(i)

        # Create a thread for each camera
        thread = threading.Thread(target=run_camera_capture, args=(cam, NUM_IMAGES, cfg))

        # Start the thread
        thread.start()

        # Add the thread to the list
        camera_threads.append(thread)

    # Wait for all camera threads to complete
    for thread in camera_threads:
        thread.join()

    # Clear the camera list before releasing the system
    cam_list.Clear()

    # Release
